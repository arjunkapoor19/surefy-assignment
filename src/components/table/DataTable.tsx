"use client";
import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragEndEvent } from '@dnd-kit/core';
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable';
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, TableSortLabel, TablePagination, Alert, AlertTitle } from '@mui/material';
import { RootState } from '@/store/rootReducer';
import { setSort, setPage, setRowsPerPage, reorderUsers, deleteUser } from '@/store/tableSlice';
import { User } from '@/lib/mock-data';
import TheToolbar from './DataTableToolbar';
import SortableTableRow from './SortableTableRow';
import ConfirmationDialog from './ConfirmationDialog';

const selectVisibleRows = (state: RootState): User[] => {
    const { data, searchTerm, sort } = state.table;
    const filteredData = data.filter(user => Object.values(user).some(value => String(value).toLowerCase().includes(searchTerm.toLowerCase())));
    if (sort.key) { filteredData.sort((a, b) => { const aValue = a[sort.key as keyof User], bValue = b[sort.key as keyof User]; if (aValue === undefined || bValue === undefined) return 0; if (typeof aValue === 'string' && typeof bValue === 'string') { return sort.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue); } if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1; if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1; return 0; }); }
    return filteredData;
};

export default function DataTable() {
  const dispatch = useDispatch();
  const { columns, sort, pagination, editingRowId, data } = useSelector((state: RootState) => state.table);
  const visibleRows = useSelector(selectVisibleRows);

  const [dialogOpen, setDialogOpen] = useState(false);
  const [userToDelete, setUserToDelete] = useState<User | null>(null);
  const [isAlertOpen, setIsAlertOpen] = useState(true);

  const handleOpenDeleteDialog = (user: User) => { setUserToDelete(user); setDialogOpen(true); };
  const handleCloseDeleteDialog = () => { setUserToDelete(null); setDialogOpen(false); };
  const handleConfirmDelete = () => { if (userToDelete) { dispatch(deleteUser(userToDelete.id)); } handleCloseDeleteDialog(); };
  const handleRequestSort = (property: keyof User) => { dispatch(setSort(property)); };
  const handleChangePage = (event: unknown, newPage: number) => { dispatch(setPage(newPage)); };
  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => { dispatch(setRowsPerPage(parseInt(event.target.value, 10))); };
  
  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor));
  function handleDragEnd(event: DragEndEvent) { const { active, over } = event; if (over && active.id !== over.id) { dispatch(reorderUsers({ activeId: active.id as number, overId: over.id as number })); } }
  const paginatedRows = visibleRows.slice(pagination.page * pagination.rowsPerPage, pagination.page * pagination.rowsPerPage + pagination.rowsPerPage);

  return (
    <>
      {isAlertOpen && (
        <Alert
          severity="info"
          sx={{ mb: 2 }}
          onClose={() => setIsAlertOpen(false)}
        >
          <AlertTitle>Welcome!</AlertTitle>
          This table is using mock data generated by AI. Please use the Import CSV button to test with your own data.
        </Alert>
      )}

      <Paper sx={{ width: '100%', mb: 2 }}>
        <TheToolbar />
        <TableContainer>
          <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
            <Table stickyHeader aria-label="dynamic data table">
              <TableHead>
                <TableRow>
                  <TableCell padding="checkbox">{null}</TableCell>
                  {columns.filter(c => c.visible).map((column) => (
                    <TableCell key={column.id} sortDirection={sort.key === column.id ? sort.direction : false}>
                      <TableSortLabel active={sort.key === column.id} direction={sort.key === column.id ? 'asc' : 'asc'} onClick={() => handleRequestSort(column.id)} sx={{ '& .MuiTableSortLabel-icon': { opacity: 1, }, }}>
                        {column.label}
                      </TableSortLabel>
                    </TableCell>
                  ))}
                  <TableCell align="right" sx={{ minWidth: 120 }}>Actions</TableCell>
                </TableRow>
              </TableHead>
              <SortableContext items={data.map(user => user.id)} strategy={verticalListSortingStrategy}>
                <TableBody>
                  {paginatedRows.map((row) => (
                    <SortableTableRow 
                      key={row.id} 
                      row={row} 
                      visibleColumns={columns.filter(c => c.visible)} 
                      isEditing={editingRowId === row.id} 
                      onDeleteClick={() => handleOpenDeleteDialog(row)}
                    />
                  ))}
                </TableBody>
              </SortableContext>
            </Table>
          </DndContext>
        </TableContainer>
        <TablePagination rowsPerPageOptions={[5, 10, 25]} component="div" count={visibleRows.length} rowsPerPage={pagination.rowsPerPage} page={pagination.page} onPageChange={handleChangePage} onRowsPerPageChange={handleChangeRowsPerPage} />
      
        {userToDelete && (
            <ConfirmationDialog
              open={dialogOpen}
              onClose={handleCloseDeleteDialog}
              onConfirm={handleConfirmDelete}
              title="Delete User"
              description={`Are you sure you want to delete ${userToDelete.name}? This action cannot be undone.`}
            />
        )}
      </Paper>
    </>
  );
}